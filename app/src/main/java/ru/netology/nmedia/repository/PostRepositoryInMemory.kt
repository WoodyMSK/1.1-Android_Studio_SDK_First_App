package ru.netology.nmedia.repository

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import ru.netology.nmedia.dto.Post
import kotlin.math.roundToInt

class PostRepositoryInMemory : PostRepository {

    private var ids = 1L
    private val posts = listOf(
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "17 сентября в 18:27",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru",
            videoLink = "https://www.youtube.com/watch?v=X90YA6NNcbc",
            likes = 100
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "5 сентября в 06:34",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "27 августа в 21:45",
            videoLink = "http://www.google.com",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "10 августа в 10:18",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "31 июля в 11:57",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "17 июля в 23:34",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "1 июля в 19:11",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "17 июня в 07:28",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "11 июня в 14:25",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
        Post(
            id = ids++,
            author = "Нетология. Университет интернет-проффесий будущего",
            published = "21 мая в 18:36",
            content = "Привет, это новая Нетология! Когда-то Нетология начиналась с интенсивов по онлайн-маркетингу. Затем появились курсы по дизайну, разработке, аналитике и управлению. Мы растём сами и помогаем расти студентам: от новичков до уверенных профессионалов. Но самое важное остаётся с нами: мы верим, что в каждом уже есть сила, которая заставляет хотеть больше, целиться выше, бежать быстрее. Наша миссия - помочь встать на путь роста и начать цепочку перемен ➞ https://netology.ru"
        ),
    )
    private val data: MutableLiveData<List<Post>> = MutableLiveData(posts)

    override fun get(): LiveData<List<Post>> = data

    override fun likeById(id: Long) {
        val currentPosts = data.value!!
        val newPosts = currentPosts.map {
            if (it.id == id) it.copy(
                liked = !it.liked,
                likes = if (it.liked) {
                    it.likes.dec()
                } else {
                    it.likes.inc()
                }
            ) else it
        }
        data.value = newPosts
    }

    override fun shareById(id: Long) {
        val currentPost = data.value!!
        val newPost = currentPost.map {
            if (it.id == id) it.copy(
                share = it.share + 100
            ) else it
        }
        data.value = newPost
    }

    override fun removeById(id: Long) {
        data.value = data.value?.filter { it.id != id }
    }

    override fun save(post: Post) {
        if (post.id == 0L) {
            data.value =
                data.value.orEmpty()
                    .toMutableList()
                    .apply {
                        add(0, post.copy(id = ids++, author = "Me", published = "Now"))
                    }
            return
        }

        data.value = data.value?.map {
            if (it.id != post.id) it else it.copy(content = post.content)
        }
    }


    override fun saveNewEditedPost(post: Post) {
        if (post.id == 0L) {
            data.value =
                data.value.orEmpty()
                    .toMutableList()
                    .apply {
                        add(0, post.copy(id = ids++, author = "Me", published = "Now"))
                    }
            return
        }

        data.value = data.value?.map {
            if (it.id != post.id) it else it.copy(content = post.content, videoLink = post.videoLink)
        }
//        val editedPost = data.value.orEmpty().filter { it.id == post.id }[0].copy(content = post.content, videoLink = post.videoLink)
//
//        data.value = data.value?.filter { it.id != post.id }
//        data.value = data.value
//            .orEmpty()
//            .toMutableList()
//            .apply {
//                add(0, editedPost)
//            }
//
//        return

    }


    override fun copyPost(post: Post) {
        data.value =
            data.value.orEmpty()
                .toMutableList()
                .apply {
                    add(
                        0, post.copy(
                            id = post.id,
                            author = post.author,
                            published = post.published,
                            content = post.content,
                            videoLink = post.videoLink,
                            liked = post.liked,
                            likes = post.likes,
                            share = post.share
                        )
                    )
                }
        return
    }

    override fun getDraft(): String? {
        TODO("Not yet implemented")
    }

    override fun setDraft(draft: String?) {
        TODO("Not yet implemented")
    }

    override fun cancel(post: Post) {
        data.value = data.value?.map {
            if (it.id != post.id) it else it.copy(content = it.content)
        }
    }
}